name: Pamplejuce

on:
  workflow_dispatch: # lets you run a build from the UI
  push:
  pull_request:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  DISPLAY: :0 # linux pluginval needs this
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  SCCACHE_GHA_ENABLED: true
  SCCACHE_CACHE_MULTIARCH: 1
  IPP_DIR: C:\Program Files (x86)\Intel\oneAPI\ipp\latest\lib\cmake\ipp

defaults:
  run:
    shell: bash

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    # don't double run on PRs
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
          - name: Linux
            os: ubuntu-22.04
            extra-flags: -G Ninja
          - name: macOS
            os: macos-14
            extra-flags: -G Ninja -DCMAKE_OSX_ARCHITECTURES="arm64"
          - name: Windows
            os: windows-latest

    steps:
      # Setup MSVC toolchain and developer command prompt (Windows)
      - uses: ilammy/msvc-dev-cmd@v1

      # Use clang on Linux so we don't introduce a 3rd compiler (Windows and macOS use MSVC and Clang)
      - name: Set up Clang
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-clang@v1

      # This also starts up our "fake" display (Xvfb), needed for GUI testing
      - name: Install JUCE's Linux Deps
        if: runner.os == 'Linux'
        # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
        run: |
          sudo apt-get update && sudo apt install libasound2-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev xvfb ninja-build
          sudo /usr/bin/Xvfb $DISPLAY &

      - name: Cache IPP (Windows)
        if: runner.os == 'Windows'
        id: cache-ipp
        uses: actions/cache@v4
        with:
          key: ipp-v6
          path: C:\Program Files (x86)\Intel

      - name: Install IPP (Windows)
        if: (runner.os == 'Windows') && (steps.cache-ipp.outputs.cache-hit != 'true')
        run: |
          curl --output oneapi.exe https://registrationcenter-download.intel.com/akdlm/IRC_NAS/2e89fab4-e1c7-4f14-a1ef-6cddba8c5fa7/intel-ipp-2022.0.0.796_offline.exe
          ./oneapi.exe -s -x -f oneapi
          ./oneapi/bootstrapper.exe -s -c --action install --components=intel.oneapi.win.ipp.devel --eula=accept -p=NEED_VS2022_INTEGRATION=1 --log-dir=.

      - name: Save IPP cache (even on CI fail)
        if: runner.os == 'Windows' && (steps.cache-ipp.outputs.cache-hit != 'true')
        uses: actions/cache/save@v4
        with:
          path: C:\Program Files (x86)\Intel
          key: ipp-v6

      - name: Install Windows Deps
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          
          # Manual installation of libusb
          mkdir -p C:/libusb
          curl -L https://github.com/libusb/libusb/releases/download/v1.0.26/libusb-1.0.26-binaries.7z -o libusb.7z
          7z x libusb.7z -oC:/libusb
          echo "LIBUSB_DIR=C:/libusb" >> $GITHUB_ENV
          # Add to PATH so DLLs can be found at runtime
          echo "C:/libusb/MS64/dll" >> $GITHUB_PATH

      - name: Install macOS Deps
        if: ${{ matrix.name == 'macOS' }}
        run: brew install ninja osxutils

      # This block can be removed once 15.1 is default (JUCE requires it when building on macOS 14)
      - name: Use latest Xcode on system (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build and Install SDL3 (Windows)
        if: ${{ matrix.name == 'Windows' }}
        run: |
          # Check if SDL3 directory exists in vendor
          if [ -d "vendor/SDL3" ]; then
            cd vendor/SDL3
            mkdir -p build
            cd build
            cmake .. -DSDL_STATIC=OFF -DSDL_SHARED=ON -DHAVE_GAMEINPUT_H=0
            cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4
            cmake --install . --config ${{ env.BUILD_TYPE }}
            # Add SDL3 to path for the main build
            echo "SDL3_DIR=$(pwd)/install" >> $GITHUB_ENV
            
            # Copy SDL3.dll to a location we can find later
            mkdir -p ../../../../Builds/Release/
            cp ${{ env.BUILD_TYPE }}/SDL3.dll ../../../../Builds/Release/
            echo "Copied SDL3.dll to Builds/Release directory"
            ls -la ../../../../Builds/Release/
            
            cd ../../..
          else
            echo "ERROR: SDL3 directory not found in vendor folder."
            echo "Please ensure the SDL3 submodule is properly initialized."
            exit 1
          fi

      - name: Build and Install SDL3 (Linux)
        if: ${{ matrix.name == 'Linux' }}
        run: |
          if [ -d "vendor/SDL3" ]; then
            cd vendor/SDL3
            mkdir -p build
            cd build
            
            # Build SDL3 for Linux with RPATH set to $ORIGIN
            # This tells the executable to look for libraries in its own directory
            cmake .. -DSDL_STATIC=OFF -DSDL_SHARED=ON \
              -DCMAKE_INSTALL_PREFIX="$(pwd)/install" \
              -DCMAKE_INSTALL_RPATH="\$ORIGIN" \
              -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON
            
            cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4
            cmake --install . --config ${{ env.BUILD_TYPE }}
            
            # Set the SDL3_DIR to point to the directory containing SDL3Config.cmake
            echo "SDL3_DIR=$(pwd)/install/lib/cmake/SDL3" >> $GITHUB_ENV
            
            # Also set the SDL3_LIBRARY path for direct access to the shared library
            echo "SDL3_LIBRARY=$(pwd)/install/lib/libSDL3.so.0" >> $GITHUB_ENV
            
            # List the files to verify they're there
            echo "Contents of SDL3 cmake directory:"
            ls -la install/lib/cmake/SDL3/
            echo "Contents of SDL3 lib directory:"
            ls -la install/lib/
            
            cd ../../..
          else
            echo "ERROR: SDL3 directory not found in vendor folder."
            echo "Please ensure the SDL3 submodule is properly initialized."
            exit 1
          fi

      - name: Build and Install SDL3 (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          if [ -d "vendor/SDL3" ]; then
            cd vendor/SDL3
            mkdir -p build
            cd build
            
            # Build only for arm64 - disable precompiled headers to avoid architecture issues
            cmake .. -DCMAKE_OSX_ARCHITECTURES="arm64" -DSDL_STATIC=OFF -DSDL_SHARED=ON -DCMAKE_INSTALL_PREFIX="$(pwd)/install" -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON
            cmake --build . --config ${{ env.BUILD_TYPE }} --parallel 4
            cmake --install . --config ${{ env.BUILD_TYPE }}
            
            # Set the SDL3_DIR to point to the directory containing SDL3Config.cmake
            echo "SDL3_DIR=$(pwd)/install/lib/cmake/SDL3" >> $GITHUB_ENV
            
            # Also set the SDL3_LIBRARY path for direct access to the dylib
            echo "SDL3_LIBRARY=$(pwd)/install/lib/libSDL3.0.dylib" >> $GITHUB_ENV
            
            # List the files to verify they're there
            echo "Contents of SDL3 cmake directory:"
            ls -la install/lib/cmake/SDL3/
            echo "Contents of SDL3 lib directory:"
            ls -la install/lib/
            
            # Copy the SDL3 library to a location that will be easier to find
            mkdir -p ../../../Builds/Release/
            cp install/lib/libSDL3.0.dylib ../../../Builds/Release/
            echo "Copied SDL3 library to Builds/Release directory"
            ls -la ../../../Builds/Release/
            
            cd ../../..
          else
            echo "ERROR: SDL3 directory not found in vendor folder."
            echo "Please ensure the SDL3 submodule is properly initialized."
            exit 1
          fi

      - name: Cache the build
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Import Certificates (macOS)
        uses: sudara/basic-macos-keychain-action@v1
        id: keychain
        if: ${{ matrix.name == 'macOS'}}
        with:
          dev-id-app-cert: ${{ secrets.DEV_ID_APP_CERT }}
          dev-id-app-password: ${{ secrets.DEV_ID_APP_PASSWORD }}
          dev-id-installer-cert: ${{ secrets.DEV_ID_INSTALLER_CERT }}
          dev-id-installer-password: ${{ secrets.DEV_ID_INSTALLER_PASSWORD }}

      - name: Configure
        run: |
          # For macOS, ensure we're only building for arm64 to match SDL3
          if [[ "${{ matrix.name }}" == "macOS" ]]; then
            # Add -DCMAKE_CXX_FLAGS to include the standard library header directly
            # and set the minimum deployment target to avoid compatibility issues
            cmake -B ${{ env.BUILD_DIR }} \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
              -DHAVE_GAMEINPUT_H=0 \
              -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON \
              -DCMAKE_OSX_ARCHITECTURES="arm64" \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
              -DCMAKE_CXX_FLAGS="-include cstddef -include stddef.h" \
              -DSDL3_LIBRARY="${{ env.SDL3_LIBRARY }}" \
              ${{ matrix.extra-flags }} .
          elif [[ "${{ matrix.name }}" == "Linux" ]]; then
            # Linux-specific configuration
            cmake -B ${{ env.BUILD_DIR }} \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
              -DHAVE_GAMEINPUT_H=0 \
              -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON \
              -DCMAKE_INSTALL_RPATH="\$ORIGIN" \
              -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
              ${{ matrix.extra-flags }} .
          else
            # Windows and other platforms
            cmake -B ${{ env.BUILD_DIR }} \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} \
              -DCMAKE_C_COMPILER_LAUNCHER=sccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
              -DHAVE_GAMEINPUT_H=0 \
              -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON \
              ${{ matrix.extra-flags }} .
          fi

      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} --parallel 4

      - name: Test & Benchmarks
        working-directory: ${{ env.BUILD_DIR }}
        run: ctest --verbose --output-on-failure

      - name: Read in .env from CMake # see GitHubENV.cmake
        run: |
          cat .env # show us the config
          cat .env >> $GITHUB_ENV # pull in our PRODUCT_NAME, etc

      - name: Set additional env vars for next steps
        run: |
          ARTIFACTS_PATH=${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}
          echo "ARTIFACTS_PATH=$ARTIFACTS_PATH" >> $GITHUB_ENV
          echo "STANDALONE_PATH=$ARTIFACTS_PATH/${{ env.PRODUCT_NAME }}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}" >> $GITHUB_ENV

      - name: Codesign (macOS)
        if: ${{ matrix.name == 'macOS' }}
        timeout-minutes: 5
        run: |
          # Print app bundle info before signing
          echo "App bundle details before signing:"
          ls -la "${{ env.STANDALONE_PATH }}.app"
          du -sh "${{ env.STANDALONE_PATH }}.app"
          
          # First try signing with less options to see if it works
          echo "Starting basic codesign..."
          codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" "${{ env.STANDALONE_PATH }}.app"
          
          # If that succeeds, try the full signing command
          if [ $? -eq 0 ]; then
            echo "Basic signing succeeded, now trying full signing..."
            codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.STANDALONE_PATH }}.app" --deep --strict --options=runtime --timestamp
          else
            echo "Basic signing failed, skipping full signing"
            # Continue workflow even if signing fails
            exit 0
          fi
          
          # Verify the signature
          echo "Verifying signature..."
          codesign -vvv --deep --strict "${{ env.STANDALONE_PATH }}.app"

      - name: Add Custom Icons (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          # add the icns as its own icon resource (meta!)
          sips -i packaging/pamplejuce.icns

          # Grab the resource, put in tempfile
          DeRez -only icns packaging/pamplejuce.icns > /tmp/icons

          # Stuff the resource into the strange Icon? file's resource fork
          Rez -a /tmp/icons -o "${{ env.STANDALONE_PATH }}.app/Icon"$'\r'

          # Set custom icon attribute
          SetFile -a C "${{ env.STANDALONE_PATH }}.app"
          
      - name: Verify SDL3 in App Bundle (macOS)
        if: ${{ matrix.name == 'macOS' }}
        run: |
          echo "Checking app bundle contents:"
          ls -la "${{ env.STANDALONE_PATH }}.app/Contents/MacOS/"
          
          # Check if the SDL3 library is in the app bundle
          if [ -f "${{ env.STANDALONE_PATH }}.app/Contents/MacOS/libSDL3.0.dylib" ]; then
            echo "SDL3 library found in app bundle"
          else
            echo "WARNING: SDL3 library not found in app bundle"
            # Try to copy it manually as a fallback
            cp "${{ env.SDL3_LIBRARY }}" "${{ env.STANDALONE_PATH }}.app/Contents/MacOS/"
            echo "Manually copied SDL3 library to app bundle"
            ls -la "${{ env.STANDALONE_PATH }}.app/Contents/MacOS/"
          fi
          
          # Check the dynamic library dependencies
          echo "Checking dynamic library dependencies:"
          otool -L "${{ env.STANDALONE_PATH }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}"
          
          # Fix the install name if needed
          if otool -L "${{ env.STANDALONE_PATH }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}" | grep -q "@rpath/libSDL3.0.dylib"; then
            echo "Fixing SDL3 install name"
            install_name_tool -change @rpath/libSDL3.0.dylib @executable_path/libSDL3.0.dylib \
              "${{ env.STANDALONE_PATH }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}"
            echo "After fixing install name:"
            otool -L "${{ env.STANDALONE_PATH }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}"
          fi

      - name: Create DMG (macOS)
        if: ${{ matrix.name == 'macOS' }}
        timeout-minutes: 5
        run: |
          # Create a DMG for the standalone app
          hdiutil create -volname "${{ env.PRODUCT_NAME }}" -srcfolder "${{ env.STANDALONE_PATH }}.app" -ov -format UDZO "packaging/${{ env.ARTIFACT_NAME }}.dmg"
          
          # Submit and capture the submission ID
          SUBMISSION_ID=$(xcrun notarytool submit "packaging/${{ env.ARTIFACT_NAME }}.dmg" \
            --apple-id ${{ secrets.NOTARIZATION_USERNAME }} \
            --password ${{ secrets.NOTARIZATION_PASSWORD }} \
            --team-id ${{ secrets.TEAM_ID }} \
            --output-format json | jq -r '.id')

          echo "Submission ID: $SUBMISSION_ID"

          # Wait for notarization to complete
          xcrun notarytool wait "$SUBMISSION_ID" \
            --apple-id ${{ secrets.NOTARIZATION_USERNAME }} \
            --password ${{ secrets.NOTARIZATION_PASSWORD }} \
            --team-id ${{ secrets.TEAM_ID }}

          # Check the specific submission
          xcrun notarytool info "$SUBMISSION_ID" \
            --apple-id ${{ secrets.NOTARIZATION_USERNAME }} \
            --password ${{ secrets.NOTARIZATION_PASSWORD }} \
            --team-id ${{ secrets.TEAM_ID }}

      - name: Verify SDL3 in Executable Directory (Linux)
        if: ${{ matrix.name == 'Linux' }}
        run: |
          echo "Checking executable directory contents:"
          ls -la "${{ env.ARTIFACTS_PATH }}"
          
          # Debug: Show the full paths
          echo "Full artifacts path: ${{ env.ARTIFACTS_PATH }}"
          echo "Full standalone path: ${{ env.STANDALONE_PATH }}"
          
          # Make sure the SDL3 library is in the artifacts directory
          if [ ! -f "${{ env.ARTIFACTS_PATH }}/libSDL3.so.0" ]; then
            echo "Copying libSDL3.so.0 to artifacts directory"
            cp "${{ env.SDL3_LIBRARY }}" "${{ env.ARTIFACTS_PATH }}/"
          fi
          
          # Check if the executable exists
          if [ -f "${{ env.STANDALONE_PATH }}" ]; then
            echo "Checking executable dependencies:"
            ldd "${{ env.STANDALONE_PATH }}" | grep SDL3
            
            # Check if the executable has the correct RPATH
            echo "Checking RPATH:"
            readelf -d "${{ env.STANDALONE_PATH }}" | grep RPATH || echo "No RPATH found"
            
            # Install patchelf explicitly if needed
            if ! command -v patchelf &> /dev/null; then
              echo "Installing patchelf..."
              sudo apt-get update && sudo apt-get install -y patchelf
            fi
            
            # Set RPATH to $ORIGIN to look for libraries in the same directory as the executable
            echo "Setting RPATH to \$ORIGIN"
            patchelf --set-rpath '$ORIGIN' "${{ env.STANDALONE_PATH }}"
            
            # Verify the RPATH was set
            echo "After setting RPATH:"
            readelf -d "${{ env.STANDALONE_PATH }}" | grep RPATH || echo "Failed to set RPATH"
            
            # Verify the library dependencies again
            echo "Checking executable dependencies after RPATH change:"
            ldd "${{ env.STANDALONE_PATH }}" | grep SDL3
          fi
          
          # Make sure the SDL3 library is included in the zip file
          echo "Creating zip file with executable and SDL3 library"
          cd "${{ env.ARTIFACTS_PATH }}"
          # Check if zip file exists and remove it
          if [ -f "${{ env.ARTIFACT_NAME }}.zip" ]; then
            echo "Removing existing zip file"
            rm -f "${{ env.ARTIFACT_NAME }}.zip"
          fi
          
          # Create a new zip file with both the executable and the SDL3 library
          echo "Creating new zip file with: ${{ env.PRODUCT_NAME }} and libSDL3.so.0"
          7z a -tzip "${{ env.ARTIFACT_NAME }}.zip" "${{ env.PRODUCT_NAME }}" "libSDL3.so.0"
          
          # Verify the contents of the zip file
          echo "Verifying zip file contents:"
          7z l "${{ env.ARTIFACT_NAME }}.zip"
          

      - name: Verify SDL3 in Executable Directory (Windows)
        if: ${{ matrix.name == 'Windows' }}
        run: |
          echo "Checking executable directory contents:"
          
          # Debug: Show the full paths
          echo "Full artifacts path: ${{ env.ARTIFACTS_PATH }}"
          echo "Full standalone path: ${{ env.STANDALONE_PATH }}"
          
          # First check if the standalone directory exists
          if [ ! -d "${{ env.STANDALONE_PATH }}" ]; then
            echo "Standalone directory does not exist, checking if it's a file"
            if [ -f "${{ env.STANDALONE_PATH }}" ]; then
              echo "Standalone path is a file, using its parent directory"
              STANDALONE_DIR="$(dirname "${{ env.STANDALONE_PATH }}")"
            else
              echo "Standalone path doesn't exist at all, using artifacts directory"
              STANDALONE_DIR="${{ env.ARTIFACTS_PATH }}"
            fi
          else
            echo "Standalone directory exists"
            STANDALONE_DIR="${{ env.STANDALONE_PATH }}"
          fi
          
          echo "Using standalone directory: $STANDALONE_DIR"
          
          # Make sure SDL3.dll is in the directory with the executable
          if [ ! -f "$STANDALONE_DIR/SDL3.dll" ]; then
            echo "Copying SDL3.dll to executable directory"
            cp "Builds/Release/SDL3.dll" "$STANDALONE_DIR/" || echo "Failed to copy SDL3.dll"
            echo "Directory contents after copy:"
            ls -la "$STANDALONE_DIR/"
          else
            echo "SDL3.dll already exists in executable directory"
          fi

      - name: Generate Installer (Windows)
        if: ${{ matrix.name == 'Windows' }}
        run: |
          # Debug: Show the paths we're working with
          echo "STANDALONE_PATH: ${{ env.STANDALONE_PATH }}"
          echo "ARTIFACTS_PATH: ${{ env.ARTIFACTS_PATH }}"
          
          # Check if SDL3.dll exists in the Builds/Release directory
          if [ ! -f "Builds/Release/SDL3.dll" ]; then
            echo "SDL3.dll not found in Builds/Release, trying to find it"
            find vendor -name "SDL3.dll" -exec cp {} "Builds/Release/" \; || echo "Could not find SDL3.dll in vendor"
            find ${{ env.BUILD_DIR }} -name "SDL3.dll" -exec cp {} "Builds/Release/" \; || echo "Could not find SDL3.dll in build directory"
          fi
          
          # Verify SDL3.dll is in the Builds/Release directory
          if [ -f "Builds/Release/SDL3.dll" ]; then
            echo "SDL3.dll found in Builds/Release directory"
          else
            echo "ERROR: SDL3.dll not found in Builds/Release directory"
            exit 1
          fi
          
          # Run the Inno Setup compiler - no need to copy to STANDALONE_PATH as the installer.iss
          # is already configured to use the correct paths
          iscc "packaging\installer.iss"
          mv "packaging\Output\${{ env.PRODUCT_NAME }}-${{ env.VERSION }}-${{ matrix.name }}.exe" "${{ env.ARTIFACTS_PATH }}/"
          # Verify the installer was created
          echo "Installer created at: ${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.exe"
          ls -la "${{ env.ARTIFACTS_PATH }}/"
      
      # - name: Codesign with Azure Trusted Signing (Windows)
      #   if: ${{ matrix.name == 'Windows' }}
      #   uses: azure/trusted-signing-action@v0.5.1
        # with:
        #   # The Azure Active Directory tenant (directory) ID.
        #   azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}

        #   # The client (application) ID of an App Registration in the tenant.
        #   azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}

        #   # A client secret that was generated for the App Registration.
        #   azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

        #   # The Code Signing Account endpoint. The URI value must have a URI that aligns to the region your Code Signing Account and Certificate Profile you are specifying were created in during the setup of these resources.
        #   endpoint: ${{ secrets.AZURE_ENDPOINT }}

        #   # The Code Signing Account name.
        #   trusted-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_NAME }}

        #   # The Certificate Profile name.
        #   certificate-profile-name: ${{ secrets.AZURE_CERT_PROFILE_NAME }}

        #   # This signs all exes inside the folder
        #   files-folder: ${{ env.ARTIFACTS_PATH }}
        #   files-folder-filter: exe

      - name: Upload Exe (Windows)
        if: ${{ matrix.name == 'Windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.exe
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.exe"

      - name: Upload Zip (Linux)
        if: ${{ matrix.name == 'Linux' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.zip
          path: "${{ env.ARTIFACTS_PATH }}/${{ env.ARTIFACT_NAME }}.zip"

      - name: Upload DMG (macOS)
        if: ${{ matrix.name == 'macOS' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}.dmg
          path: packaging/${{ env.ARTIFACT_NAME }}.dmg

      - name: Debug - List build artifacts
        if: ${{ matrix.name == 'Windows' }}
        run: |
          echo "Listing build artifacts directory structure:"
          ls -la "${{ env.BUILD_DIR }}"
          ls -la "${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts"
          ls -la "${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}"
          ls -la "${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/Standalone" || echo "Standalone directory not found"

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          # download-artifact puts these files in their own dirs...
          # Using globs sidesteps having to pass the version around
          files: |
            */*.exe
            */*.zip
            */*.dmg
